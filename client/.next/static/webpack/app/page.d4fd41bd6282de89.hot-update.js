"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/util/AnalyticsLocalStorageManager.ts":
/*!**************************************************!*\
  !*** ./src/util/AnalyticsLocalStorageManager.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! object-sizeof */ \"(app-pages-browser)/../node_modules/object-sizeof/indexv2.js\");\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(object_sizeof__WEBPACK_IMPORTED_MODULE_0__);\n\nclass AnalyticsLocalStorageManager {\n    // Store data with size management\n    storeData(key, data) {\n        try {\n            const serialized = JSON.stringify(data);\n            console.log('sizeof serialized:', object_sizeof__WEBPACK_IMPORTED_MODULE_0___default()(serialized));\n            const sizeInMB = new Blob([\n                serialized\n            ]).size / (1024 * 1024);\n            // If data is getting too large (>5MB), keep only recent items\n            if (sizeInMB > 5) {\n                const recentData = data.slice(-1000); // Keep last 1000 items\n                localStorage.setItem(key, JSON.stringify(recentData));\n                console.warn(\"\\uD83D\\uDCE6 Storage size exceeded for \".concat(key, \", keeping recent \").concat(recentData.length, \" items\"));\n            } else {\n                localStorage.setItem(key, serialized);\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to store \".concat(key, \":\"), error);\n            this.handleStorageError(key, data);\n        }\n    }\n    getData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : [];\n        } catch (error) {\n            console.error(\"❌ Failed to retrieve \".concat(key, \":\"), error);\n            return [];\n        }\n    }\n    appendData(key, newItem) {\n        const existing = this.getData(key);\n        existing.push(newItem);\n        this.storeData(key, existing);\n    }\n    updateUserBehavior(behavior) {\n        localStorage.setItem(this.STORAGE_KEYS.USER_BEHAVIOR, JSON.stringify(behavior));\n    }\n    getUserBehavior() {\n        const data = localStorage.getItem(this.STORAGE_KEYS.USER_BEHAVIOR);\n        return data ? JSON.parse(data) : null;\n    }\n    // Queue data for syncing\n    queueForSync(sessionId) {\n        const payload = {\n            sessionId,\n            events: this.getData(this.STORAGE_KEYS.EVENTS),\n            networkMetrics: this.getData(this.STORAGE_KEYS.NETWORK),\n            performanceMetrics: this.getData(this.STORAGE_KEYS.PERFORMANCE),\n            userBehavior: this.getUserBehavior() || {},\n            timestamp: Date.now()\n        };\n        const syncQueue = this.getData(this.STORAGE_KEYS.SYNC_QUEUE);\n        syncQueue.push(payload);\n        this.storeData(this.STORAGE_KEYS.SYNC_QUEUE, syncQueue);\n    }\n    getSyncQueue() {\n        return this.getData(this.STORAGE_KEYS.SYNC_QUEUE);\n    }\n    clearSyncedData(timestamp) {\n        const queue = this.getSyncQueue().filter((item)=>item.timestamp > timestamp);\n        this.storeData(this.STORAGE_KEYS.SYNC_QUEUE, queue);\n    }\n    clearLocalData() {\n        Object.values(this.STORAGE_KEYS).forEach((key)=>{\n            if (key !== this.STORAGE_KEYS.SYNC_QUEUE) {\n                localStorage.removeItem(key);\n            }\n        });\n    }\n    handleStorageError(key, data) {\n        // Try to clear old data and retry\n        if (Array.isArray(data) && data.length > 100) {\n            const reducedData = data.slice(-50);\n            try {\n                localStorage.setItem(key, JSON.stringify(reducedData));\n                console.warn(\"Reduced \".concat(key, \" data size and retried\"));\n            } catch (e) {\n                console.error(\"Critical storage error for \".concat(key));\n            }\n        }\n    }\n    getStorageInfo() {\n        const info = Object.entries(this.STORAGE_KEYS).map((param)=>{\n            let [name, key] = param;\n            const data = localStorage.getItem(key);\n            const size = data ? new Blob([\n                data\n            ]).size : 0;\n            return {\n                name,\n                key,\n                size: \"\".concat((size / 1024).toFixed(2), \" KB\"),\n                items: data ? JSON.parse(data).length || 1 : 0\n            };\n        });\n        return info;\n    }\n    constructor(){\n        this.STORAGE_KEYS = {\n            EVENTS: 'drawing_analytics_events',\n            NETWORK: 'drawing_analytics_network',\n            PERFORMANCE: 'drawing_analytics_performance',\n            USER_BEHAVIOR: 'drawing_analytics_behavior',\n            SYNC_QUEUE: 'drawing_analytics_sync_queue',\n            LAST_SYNC: 'drawing_analytics_last_sync'\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnalyticsLocalStorageManager);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlsL0FuYWx5dGljc0xvY2FsU3RvcmFnZU1hbmFnZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBaUVuQyxNQUFNQztJQVVMLGtDQUFrQztJQUNsQ0MsVUFBYUMsR0FBVyxFQUFFQyxJQUFTLEVBQVE7UUFDMUMsSUFBSTtZQUNILE1BQU1DLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0g7WUFDbENJLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0JULG9EQUFNQSxDQUFDSztZQUV6QyxNQUFNSyxXQUFXLElBQUlDLEtBQUs7Z0JBQUNOO2FBQVcsRUFBRU8sSUFBSSxHQUFJLFFBQU8sSUFBRztZQUUxRCw4REFBOEQ7WUFDOUQsSUFBSUYsV0FBVyxHQUFHO2dCQUNqQixNQUFNRyxhQUFhVCxLQUFLVSxLQUFLLENBQUMsQ0FBQyxPQUFPLHVCQUF1QjtnQkFDN0RDLGFBQWFDLE9BQU8sQ0FBQ2IsS0FBS0csS0FBS0MsU0FBUyxDQUFDTTtnQkFDekNMLFFBQVFTLElBQUksQ0FDWCwwQ0FBdURKLE9BQXZCVixLQUFJLHFCQUFxQyxPQUFsQlUsV0FBV0ssTUFBTSxFQUFDO1lBRTNFLE9BQU87Z0JBQ05ILGFBQWFDLE9BQU8sQ0FBQ2IsS0FBS0U7WUFDM0I7UUFDRCxFQUFFLE9BQU9jLE9BQU87WUFDZlgsUUFBUVcsS0FBSyxDQUFDLHFCQUF5QixPQUFKaEIsS0FBSSxNQUFJZ0I7WUFDM0MsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ2pCLEtBQUtDO1FBQzlCO0lBQ0Q7SUFFQWlCLFFBQVdsQixHQUFXLEVBQU87UUFDNUIsSUFBSTtZQUNILE1BQU1DLE9BQU9XLGFBQWFPLE9BQU8sQ0FBQ25CO1lBQ2xDLE9BQU9DLE9BQU9FLEtBQUtpQixLQUFLLENBQUNuQixRQUFRLEVBQUU7UUFDcEMsRUFBRSxPQUFPZSxPQUFPO1lBQ2ZYLFFBQVFXLEtBQUssQ0FBQyx3QkFBNEIsT0FBSmhCLEtBQUksTUFBSWdCO1lBQzlDLE9BQU8sRUFBRTtR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LEdBQUc7WUFDNUMsT0FBTztnQkFDTnFEO2dCQUNBOUQ7Z0JBQ0FTLE1BQU0sR0FBNEIsT0FBekIsQ0FBQ0EsT0FBTyxJQUFHLEVBQUdzRCxPQUFPLENBQUMsSUFBRztnQkFDbENDLE9BQU8vRCxPQUFPRSxLQUFLaUIsS0FBSyxDQUFDbkIsTUFBTWMsTUFBTSxJQUFJLElBQUk7WUFDOUM7UUFDRDtRQUNBLE9BQU80QztJQUNSOzthQTdIaUJoQyxlQUFlO1lBQy9CTyxRQUFRO1lBQ1JFLFNBQVM7WUFDVEUsYUFBYTtZQUNiVixlQUFlO1lBQ2ZnQixZQUFZO1lBQ1pxQixXQUFXO1FBQ1o7O0FBdUhEO0FBRUEsaUVBQWVuRSw0QkFBNEJBLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbXJleWlsZGlyaW0vRGVza3RvcC9maW5hbFByb2plY3QvY2xpZW50L3NyYy91dGlsL0FuYWx5dGljc0xvY2FsU3RvcmFnZU1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNpemVvZiBmcm9tICdvYmplY3Qtc2l6ZW9mJztcblxuaW50ZXJmYWNlIERyYXdpbmdFdmVudCB7XG5cdGV2ZW50SWQ6IHN0cmluZztcblx0dGltZXN0YW1wOiBudW1iZXI7XG5cdGV2ZW50VHlwZTpcblx0XHR8ICdzdHJva2Vfc3RhcnQnXG5cdFx0fCAnc3Ryb2tlX2NvbnRpbnVlJ1xuXHRcdHwgJ3N0cm9rZV9lbmQnXG5cdFx0fCAnY2FudmFzX2NsZWFyJ1xuXHRcdHwgJ3VuZG8nXG5cdFx0fCAncmVkbyc7XG5cdHN0cm9rZUlkPzogc3RyaW5nO1xuXHRjb29yZGluYXRlcz86IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfTtcblx0cHJlc3N1cmU/OiBudW1iZXI7XG5cdHRvb2w/OiBzdHJpbmc7XG5cdGNvbG9yPzogc3RyaW5nO1xuXHRicnVzaFNpemU/OiBudW1iZXI7XG5cdHVzZXJJZD86IHN0cmluZztcblx0c2Vzc2lvbklkOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBOZXR3b3JrTWV0cmljcyB7XG5cdGV2ZW50SWQ6IHN0cmluZztcblx0dGltZXN0YW1wOiBudW1iZXI7XG5cdHJ0dDogbnVtYmVyO1xuXHRhY2tub3dsZWRnZWQ6IGJvb2xlYW47XG5cdHJldHJ5Q291bnQ6IG51bWJlcjtcblx0cGF5bG9hZFNpemU6IG51bWJlcjtcblx0Y29ubmVjdGlvblF1YWxpdHk6ICdleGNlbGxlbnQnIHwgJ2dvb2QnIHwgJ2ZhaXInIHwgJ2RlY2VudCcgfCAncG9vcic7XG59XG5cbmludGVyZmFjZSBQZXJmb3JtYW5jZU1ldHJpY3Mge1xuXHR0aW1lc3RhbXA6IG51bWJlcjtcblx0ZnBzOiBudW1iZXI7XG5cdG1lbW9yeVVzYWdlOiBudW1iZXI7XG5cdGNhbnZhc1JlbmRlclRpbWU6IG51bWJlcjtcblx0ZXZlbnRQcm9jZXNzaW5nVGltZTogbnVtYmVyO1xuXHRxdWV1ZWRFdmVudHM6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFVzZXJCZWhhdmlvck1ldHJpY3Mge1xuXHRzZXNzaW9uSWQ6IHN0cmluZztcblx0dXNlcklkPzogc3RyaW5nO1xuXHRzZXNzaW9uU3RhcnQ6IG51bWJlcjtcblx0dG90YWxTdHJva2VzOiBudW1iZXI7XG5cdGF2ZXJhZ2VTdHJva2VMZW5ndGg6IG51bWJlcjtcblx0bW9zdFVzZWRUb29sOiBzdHJpbmc7XG5cdG1vc3RVc2VkQ29sb3I6IHN0cmluZztcblx0dG90YWxEcmF3aW5nVGltZTogbnVtYmVyO1xuXHRpZGxlVGltZTogbnVtYmVyO1xuXHR1bmRvQ291bnQ6IG51bWJlcjtcblx0cmVkb0NvdW50OiBudW1iZXI7XG5cdGNhbnZhc0NsZWFyQ291bnQ6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEFuYWx5dGljc1BheWxvYWQge1xuXHRzZXNzaW9uSWQ6IHN0cmluZztcblx0ZXZlbnRzOiBEcmF3aW5nRXZlbnRbXTtcblx0bmV0d29ya01ldHJpY3M6IE5ldHdvcmtNZXRyaWNzW107XG5cdHBlcmZvcm1hbmNlTWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzW107XG5cdHVzZXJCZWhhdmlvcjogVXNlckJlaGF2aW9yTWV0cmljcztcblx0dGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmNsYXNzIEFuYWx5dGljc0xvY2FsU3RvcmFnZU1hbmFnZXIge1xuXHRwcml2YXRlIHJlYWRvbmx5IFNUT1JBR0VfS0VZUyA9IHtcblx0XHRFVkVOVFM6ICdkcmF3aW5nX2FuYWx5dGljc19ldmVudHMnLFxuXHRcdE5FVFdPUks6ICdkcmF3aW5nX2FuYWx5dGljc19uZXR3b3JrJyxcblx0XHRQRVJGT1JNQU5DRTogJ2RyYXdpbmdfYW5hbHl0aWNzX3BlcmZvcm1hbmNlJyxcblx0XHRVU0VSX0JFSEFWSU9SOiAnZHJhd2luZ19hbmFseXRpY3NfYmVoYXZpb3InLFxuXHRcdFNZTkNfUVVFVUU6ICdkcmF3aW5nX2FuYWx5dGljc19zeW5jX3F1ZXVlJyxcblx0XHRMQVNUX1NZTkM6ICdkcmF3aW5nX2FuYWx5dGljc19sYXN0X3N5bmMnLFxuXHR9O1xuXG5cdC8vIFN0b3JlIGRhdGEgd2l0aCBzaXplIG1hbmFnZW1lbnRcblx0c3RvcmVEYXRhPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBUW10pOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXHRcdFx0Y29uc29sZS5sb2coJ3NpemVvZiBzZXJpYWxpemVkOicsIHNpemVvZihzZXJpYWxpemVkKSk7XG5cblx0XHRcdGNvbnN0IHNpemVJbk1CID0gbmV3IEJsb2IoW3NlcmlhbGl6ZWRdKS5zaXplIC8gKDEwMjQgKiAxMDI0KTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBnZXR0aW5nIHRvbyBsYXJnZSAoPjVNQiksIGtlZXAgb25seSByZWNlbnQgaXRlbXNcblx0XHRcdGlmIChzaXplSW5NQiA+IDUpIHtcblx0XHRcdFx0Y29uc3QgcmVjZW50RGF0YSA9IGRhdGEuc2xpY2UoLTEwMDApOyAvLyBLZWVwIGxhc3QgMTAwMCBpdGVtc1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHJlY2VudERhdGEpKTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdGDwn5OmIFN0b3JhZ2Ugc2l6ZSBleGNlZWRlZCBmb3IgJHtrZXl9LCBrZWVwaW5nIHJlY2VudCAke3JlY2VudERhdGEubGVuZ3RofSBpdGVtc2Bcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgc2VyaWFsaXplZCk7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYOKdjCBGYWlsZWQgdG8gc3RvcmUgJHtrZXl9OmAsIGVycm9yKTtcblx0XHRcdHRoaXMuaGFuZGxlU3RvcmFnZUVycm9yKGtleSwgZGF0YSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0RGF0YTxUPihrZXk6IHN0cmluZyk6IFRbXSB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXHRcdFx0cmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogW107XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYOKdjCBGYWlsZWQgdG8gcmV0cmlldmUgJHtrZXl9OmAsIGVycm9yKTtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdH1cblxuXHRhcHBlbmREYXRhPFQ+KGtleTogc3RyaW5nLCBuZXdJdGVtOiBUKTogdm9pZCB7XG5cdFx0Y29uc3QgZXhpc3RpbmcgPSB0aGlzLmdldERhdGE8VD4oa2V5KTtcblx0XHRleGlzdGluZy5wdXNoKG5ld0l0ZW0pO1xuXHRcdHRoaXMuc3RvcmVEYXRhKGtleSwgZXhpc3RpbmcpO1xuXHR9XG5cblx0dXBkYXRlVXNlckJlaGF2aW9yKGJlaGF2aW9yOiBVc2VyQmVoYXZpb3JNZXRyaWNzKTogdm9pZCB7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXG5cdFx0XHR0aGlzLlNUT1JBR0VfS0VZUy5VU0VSX0JFSEFWSU9SLFxuXHRcdFx0SlNPTi5zdHJpbmdpZnkoYmVoYXZpb3IpXG5cdFx0KTtcblx0fVxuXG5cdGdldFVzZXJCZWhhdmlvcigpOiBVc2VyQmVoYXZpb3JNZXRyaWNzIHwgbnVsbCB7XG5cdFx0Y29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuU1RPUkFHRV9LRVlTLlVTRVJfQkVIQVZJT1IpO1xuXHRcdHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IG51bGw7XG5cdH1cblxuXHQvLyBRdWV1ZSBkYXRhIGZvciBzeW5jaW5nXG5cdHF1ZXVlRm9yU3luYyhzZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IHBheWxvYWQ6IEFuYWx5dGljc1BheWxvYWQgPSB7XG5cdFx0XHRzZXNzaW9uSWQsXG5cdFx0XHRldmVudHM6IHRoaXMuZ2V0RGF0YTxEcmF3aW5nRXZlbnQ+KHRoaXMuU1RPUkFHRV9LRVlTLkVWRU5UUyksXG5cdFx0XHRuZXR3b3JrTWV0cmljczogdGhpcy5nZXREYXRhPE5ldHdvcmtNZXRyaWNzPih0aGlzLlNUT1JBR0VfS0VZUy5ORVRXT1JLKSxcblx0XHRcdHBlcmZvcm1hbmNlTWV0cmljczogdGhpcy5nZXREYXRhPFBlcmZvcm1hbmNlTWV0cmljcz4oXG5cdFx0XHRcdHRoaXMuU1RPUkFHRV9LRVlTLlBFUkZPUk1BTkNFXG5cdFx0XHQpLFxuXHRcdFx0dXNlckJlaGF2aW9yOiB0aGlzLmdldFVzZXJCZWhhdmlvcigpIHx8ICh7fSBhcyBVc2VyQmVoYXZpb3JNZXRyaWNzKSxcblx0XHRcdHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc3luY1F1ZXVlID0gdGhpcy5nZXREYXRhPEFuYWx5dGljc1BheWxvYWQ+KFxuXHRcdFx0dGhpcy5TVE9SQUdFX0tFWVMuU1lOQ19RVUVVRVxuXHRcdCk7XG5cdFx0c3luY1F1ZXVlLnB1c2gocGF5bG9hZCk7XG5cdFx0dGhpcy5zdG9yZURhdGEodGhpcy5TVE9SQUdFX0tFWVMuU1lOQ19RVUVVRSwgc3luY1F1ZXVlKTtcblx0fVxuXG5cdGdldFN5bmNRdWV1ZSgpOiBBbmFseXRpY3NQYXlsb2FkW10ge1xuXHRcdHJldHVybiB0aGlzLmdldERhdGE8QW5hbHl0aWNzUGF5bG9hZD4odGhpcy5TVE9SQUdFX0tFWVMuU1lOQ19RVUVVRSk7XG5cdH1cblxuXHRjbGVhclN5bmNlZERhdGEodGltZXN0YW1wOiBudW1iZXIpOiB2b2lkIHtcblx0XHRjb25zdCBxdWV1ZSA9IHRoaXMuZ2V0U3luY1F1ZXVlKCkuZmlsdGVyKFxuXHRcdFx0KGl0ZW0pID0+IGl0ZW0udGltZXN0YW1wID4gdGltZXN0YW1wXG5cdFx0KTtcblx0XHR0aGlzLnN0b3JlRGF0YSh0aGlzLlNUT1JBR0VfS0VZUy5TWU5DX1FVRVVFLCBxdWV1ZSk7XG5cdH1cblxuXHRjbGVhckxvY2FsRGF0YSgpOiB2b2lkIHtcblx0XHRPYmplY3QudmFsdWVzKHRoaXMuU1RPUkFHRV9LRVlTKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdGlmIChrZXkgIT09IHRoaXMuU1RPUkFHRV9LRVlTLlNZTkNfUVVFVUUpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlU3RvcmFnZUVycm9yPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBUW10pOiB2b2lkIHtcblx0XHQvLyBUcnkgdG8gY2xlYXIgb2xkIGRhdGEgYW5kIHJldHJ5XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGggPiAxMDApIHtcblx0XHRcdGNvbnN0IHJlZHVjZWREYXRhID0gZGF0YS5zbGljZSgtNTApO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShyZWR1Y2VkRGF0YSkpO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYFJlZHVjZWQgJHtrZXl9IGRhdGEgc2l6ZSBhbmQgcmV0cmllZGApO1xuXHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYENyaXRpY2FsIHN0b3JhZ2UgZXJyb3IgZm9yICR7a2V5fWApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldFN0b3JhZ2VJbmZvKCkge1xuXHRcdGNvbnN0IGluZm8gPSBPYmplY3QuZW50cmllcyh0aGlzLlNUT1JBR0VfS0VZUykubWFwKChbbmFtZSwga2V5XSkgPT4ge1xuXHRcdFx0Y29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cdFx0XHRjb25zdCBzaXplID0gZGF0YSA/IG5ldyBCbG9iKFtkYXRhXSkuc2l6ZSA6IDA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRrZXksXG5cdFx0XHRcdHNpemU6IGAkeyhzaXplIC8gMTAyNCkudG9GaXhlZCgyKX0gS0JgLFxuXHRcdFx0XHRpdGVtczogZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkubGVuZ3RoIHx8IDEgOiAwLFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHRyZXR1cm4gaW5mbztcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmFseXRpY3NMb2NhbFN0b3JhZ2VNYW5hZ2VyO1xuIl0sIm5hbWVzIjpbInNpemVvZiIsIkFuYWx5dGljc0xvY2FsU3RvcmFnZU1hbmFnZXIiLCJzdG9yZURhdGEiLCJrZXkiLCJkYXRhIiwic2VyaWFsaXplZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwibG9nIiwic2l6ZUluTUIiLCJCbG9iIiwic2l6ZSIsInJlY2VudERhdGEiLCJzbGljZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJ3YXJuIiwibGVuZ3RoIiwiZXJyb3IiLCJoYW5kbGVTdG9yYWdlRXJyb3IiLCJnZXREYXRhIiwiZ2V0SXRlbSIsInBhcnNlIiwiYXBwZW5kRGF0YSIsIm5ld0l0ZW0iLCJleGlzdGluZyIsInB1c2giLCJ1cGRhdGVVc2VyQmVoYXZpb3IiLCJiZWhhdmlvciIsIlNUT1JBR0VfS0VZUyIsIlVTRVJfQkVIQVZJT1IiLCJnZXRVc2VyQmVoYXZpb3IiLCJxdWV1ZUZvclN5bmMiLCJzZXNzaW9uSWQiLCJwYXlsb2FkIiwiZXZlbnRzIiwiRVZFTlRTIiwibmV0d29ya01ldHJpY3MiLCJORVRXT1JLIiwicGVyZm9ybWFuY2VNZXRyaWNzIiwiUEVSRk9STUFOQ0UiLCJ1c2VyQmVoYXZpb3IiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic3luY1F1ZXVlIiwiU1lOQ19RVUVVRSIsImdldFN5bmNRdWV1ZSIsImNsZWFyU3luY2VkRGF0YSIsInF1ZXVlIiwiZmlsdGVyIiwiaXRlbSIsImNsZWFyTG9jYWxEYXRhIiwiT2JqZWN0IiwidmFsdWVzIiwiZm9yRWFjaCIsInJlbW92ZUl0ZW0iLCJBcnJheSIsImlzQXJyYXkiLCJyZWR1Y2VkRGF0YSIsImdldFN0b3JhZ2VJbmZvIiwiaW5mbyIsImVudHJpZXMiLCJtYXAiLCJuYW1lIiwidG9GaXhlZCIsIml0ZW1zIiwiTEFTVF9TWU5DIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/util/AnalyticsLocalStorageManager.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/util/DrawingAnalytics.ts":
/*!**************************************!*\
  !*** ./src/util/DrawingAnalytics.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! object-sizeof */ \"(app-pages-browser)/../node_modules/object-sizeof/indexv2.js\");\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(object_sizeof__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _AnalyticsLocalStorageManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnalyticsLocalStorageManager */ \"(app-pages-browser)/./src/util/AnalyticsLocalStorageManager.ts\");\n\n\nclass DrawingAnalytics {\n    generateId() {\n        return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    initializeUserBehavior() {\n        return {\n            sessionId: this.sessionId,\n            userId: this.userId,\n            sessionStart: Date.now(),\n            totalStrokes: 0,\n            averageStrokeLength: 0,\n            mostUsedTool: '',\n            mostUsedColor: '',\n            totalDrawingTime: 0,\n            idleTime: 0,\n            undoCount: 0,\n            redoCount: 0,\n            canvasClearCount: 0\n        };\n    }\n    startPeriodicSync() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30000;\n        this.syncTimer = setInterval(async ()=>{\n            await this.syncNow();\n        }, intervalMs);\n    }\n    // Manual sync trigger\n    async syncNow() {\n        console.log('Starting analytics sync...');\n        // Queue current session data\n        this.storage.queueForSync(this.sessionId);\n        // Try to sync all queued data\n        const syncQueue = this.storage.getSyncQueue();\n        let syncedCount = 0;\n        // todo send to the backend\n        // for (const payload of syncQueue) {\n        // if (success) {\n        // \tthis.storage.clearSyncedData(payload.timestamp);\n        // \tsyncedCount++;\n        // } else {\n        // \tbreak; // Stop on first failure to maintain order\n        // }\n        // }\n        if (syncedCount > 0) {\n            console.log(\"Synced \".concat(syncedCount, \" analytics payloads\"));\n            // Clear local data after successful sync\n            this.storage.clearLocalData();\n            return true;\n        }\n        return false;\n    }\n    // Enhanced drawing event logging with comprehensive data\n    logDrawingEvent(eventType) {\n        let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const eventId = this.generateId();\n        const timestamp = Date.now();\n        const event = {\n            eventId,\n            timestamp,\n            eventType,\n            sessionId: this.sessionId,\n            userId: this.userId,\n            ...data\n        };\n        this.events.push(event);\n        this.updateUserBehavior(event);\n        this.lastActivity = timestamp;\n        // Log to console with structured format\n        console.group(\"\\uD83C\\uDFA8 Drawing Event: \".concat(eventType));\n        console.log('Event ID:', eventId);\n        console.log('Timestamp:', new Date(timestamp).toISOString());\n        console.log('Data:', data);\n        console.groupEnd();\n        return eventId;\n    }\n    // Enhanced network logging with quality assessment\n    logNetworkEvent(eventId, startTime, acknowledged, payloadSize) {\n        let retryCount = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;\n        const rtt = performance.now() - startTime;\n        const connectionQuality = this.assessConnectionQuality(rtt);\n        const networkMetric = {\n            eventId,\n            timestamp: Date.now(),\n            rtt,\n            acknowledged,\n            retryCount,\n            payloadSize,\n            connectionQuality\n        };\n        this.networkMetrics.push(networkMetric);\n        console.group(\"\\uD83D\\uDCE1 Network Event\");\n        console.log('Event ID:', eventId);\n        console.log('RTT:', \"\".concat(rtt.toFixed(2), \"ms\"));\n        console.log('Quality:', connectionQuality);\n        console.log('Payload Size:', \"\".concat(payloadSize, \" bytes\"));\n        console.log('Acknowledged:', acknowledged);\n        if (retryCount > 0) console.warn('Retry Count:', retryCount);\n        console.groupEnd();\n    }\n    assessConnectionQuality(rtt) {\n        if (rtt < 50) return 'excellent';\n        if (rtt < 100) return 'good';\n        if (rtt < 200) return 'fair';\n        if (rtt < 500) return 'decent';\n        return 'poor';\n    }\n    // Performance monitoring\n    startPerformanceMonitoring() {\n        if ( false || typeof requestAnimationFrame === 'undefined') {\n            console.warn('Performance monitoring not available in this environment');\n            return;\n        }\n        const monitor = ()=>{\n            const now = performance.now();\n            const deltaTime = now - this.lastFPSCheck;\n            if (deltaTime >= 1000) {\n                var _performance_memory;\n                // if its been a second\n                const fps = this.frameCount * 1000 / deltaTime;\n                const memoryUsage = ((_performance_memory = performance.memory) === null || _performance_memory === void 0 ? void 0 : _performance_memory.usedJSHeapSize) || 0;\n                const perfMetric = {\n                    timestamp: Date.now(),\n                    fps: Math.round(fps),\n                    memoryUsage,\n                    canvasRenderTime: 0,\n                    eventProcessingTime: 0,\n                    queuedEvents: this.eventQueue.length\n                };\n                this.performanceMetrics.push(perfMetric);\n                this.frameCount = 0;\n                this.lastFPSCheck = now;\n                // Log performance warnings\n                if (fps < 30) {\n                    console.warn(\"⚠️ Low FPS detected: \".concat(fps.toFixed(1)));\n                }\n                if (this.eventQueue.length > 10) {\n                    console.warn(\"⚠️ Event queue backlog: \".concat(this.eventQueue.length, \" events\"));\n                }\n            }\n            this.frameCount++;\n            requestAnimationFrame(monitor);\n        };\n        requestAnimationFrame(monitor);\n    }\n    // Update user behavior metrics\n    updateUserBehavior(event) {\n        switch(event.eventType){\n            case 'stroke_start':\n                this.userBehavior.totalStrokes++;\n                this.currentStrokeStart = event.timestamp;\n                break;\n            case 'stroke_end':\n                if (this.currentStrokeStart) {\n                    const strokeDuration = event.timestamp - this.currentStrokeStart;\n                    this.userBehavior.totalDrawingTime += strokeDuration;\n                }\n                break;\n            case 'undo':\n                this.userBehavior.undoCount++;\n                break;\n            case 'redo':\n                this.userBehavior.redoCount++;\n                break;\n            case 'canvas_clear':\n                this.userBehavior.canvasClearCount++;\n                break;\n        }\n    }\n    // Enhanced socket emission with comprehensive logging\n    emitWithLogging(socket, eventName, data) {\n        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n        return new Promise((resolve)=>{\n            const startTime = performance.now();\n            const eventId = this.logDrawingEvent('stroke_continue', data);\n            const payloadSize = object_sizeof__WEBPACK_IMPORTED_MODULE_0___default()(data);\n            let retryCount = 0;\n            const maxRetries = options.retryCount || 3;\n            const attempt = ()=>{\n                socket.emit(eventName, data, (ack)=>{\n                    this.logNetworkEvent(eventId, startTime, ack, payloadSize, retryCount);\n                    if (ack) {\n                        resolve(true);\n                    } else if (retryCount < maxRetries) {\n                        retryCount++;\n                        console.warn(\"\\uD83D\\uDD04 Retrying event \".concat(eventId, \" (attempt \").concat(retryCount, \"/\").concat(maxRetries, \")\"));\n                        setTimeout(attempt, 100 * retryCount); // Exponential backoff\n                    } else {\n                        console.error(\"❌ Event \".concat(eventId, \" failed after \").concat(maxRetries, \" retries\"));\n                        resolve(false);\n                    }\n                });\n            };\n            attempt();\n        });\n    }\n    // Data export and analysis methods\n    exportAnalytics() {\n        return {\n            session: this.userBehavior,\n            events: this.events,\n            network: this.networkMetrics,\n            performance: this.performanceMetrics,\n            summary: this.generateSummary()\n        };\n    }\n    generateSummary() {\n        const totalEvents = this.events.length;\n        const avgRTT = this.networkMetrics.reduce((sum, m)=>sum + m.rtt, 0) / this.networkMetrics.length || 0;\n        const acknowledgedMessages = this.networkMetrics.filter((m)=>m.acknowledged);\n        const nackMessages = this.networkMetrics.filter((m)=>!m.acknowledged);\n        const failedDataSend = nackMessages.reduce((sum, i)=>sum + i.payloadSize, 0);\n        const successRate = acknowledgedMessages.length / this.networkMetrics.length * 100 || 0;\n        const totalDataSend = acknowledgedMessages.reduce((sum, i)=>sum + i.payloadSize, 0);\n        console.log('failedDataSend,', failedDataSend);\n        const totalDataAttempted = totalDataSend + failedDataSend;\n        const dataEfficiencyRate = totalDataSend / totalDataAttempted * 100;\n        const avgSuccessfulPayloadSize = totalDataSend / acknowledgedMessages.length;\n        const avgFailedPayloadSize = failedDataSend / nackMessages.length;\n        const avgFPS = this.performanceMetrics.reduce((sum, m)=>sum + m.fps, 0) / this.performanceMetrics.length || 0;\n        return {\n            totalEvents,\n            avgRTT: Math.round(avgRTT * 100) / 100,\n            successRate: Math.round(successRate * 100) / 100,\n            avgFPS: Math.round(avgFPS),\n            totalDataSend: Math.round(totalDataSend),\n            dataEfficiencyRate: Math.round(dataEfficiencyRate),\n            avgSuccessfulPayloadSize: Math.round(avgSuccessfulPayloadSize),\n            avgFailedPayloadSize: Math.round(avgFailedPayloadSize),\n            sessionDuration: Date.now() - this.userBehavior.sessionStart,\n            networkQualityDistribution: this.getNetworkQualityDistribution()\n        };\n    }\n    getNetworkQualityDistribution() {\n        const distribution = {\n            excellent: 0,\n            good: 0,\n            fair: 0,\n            poor: 0,\n            decent: 0\n        };\n        this.networkMetrics.forEach((metric)=>{\n            distribution[metric.connectionQuality]++;\n        });\n        return distribution;\n    }\n    // Real-time monitoring dashboard (console-based)\n    startRealtimeMonitoring() {\n        let intervalMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5000;\n        setInterval(()=>{\n            const summary = this.generateSummary();\n            console.log('Session Duration:', \"\".concat(Math.round(summary.sessionDuration / 1000), \"s\"));\n            console.log('Total Events:', summary.totalEvents);\n            console.log('Average RTT:', \"\".concat(summary.avgRTT, \"ms\"));\n            console.log('Success Rate:', \"\".concat(summary.successRate, \"%\"));\n            console.log('Average FPS:', summary.avgFPS);\n            console.log('Network Quality:', summary.networkQualityDistribution);\n            console.groupEnd();\n        }, intervalMs);\n    }\n    // Cleanup\n    destroy() {\n        if (this.syncTimer) {\n            clearInterval(this.syncTimer);\n        }\n        this.syncNow(); // Final sync\n    }\n    constructor(userId){\n        this.events = [];\n        this.networkMetrics = [];\n        this.performanceMetrics = [];\n        this.lastActivity = Date.now();\n        this.frameCount = 0;\n        this.lastFPSCheck = performance.now();\n        this.eventQueue = [];\n        this.sessionId = this.generateId();\n        this.userId = userId;\n        this.userBehavior = this.initializeUserBehavior();\n        this.storage = _AnalyticsLocalStorageManager__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        this.startPerformanceMonitoring();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DrawingAnalytics);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/util/DrawingAnalytics.ts\n"));

/***/ })

});