"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/util/AnalyticsLocalStorageManager.ts":
/*!**************************************************!*\
  !*** ./src/util/AnalyticsLocalStorageManager.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! object-sizeof */ \"(app-pages-browser)/../node_modules/object-sizeof/indexv2.js\");\n/* harmony import */ var object_sizeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(object_sizeof__WEBPACK_IMPORTED_MODULE_0__);\n\nclass AnalyticsLocalStorageManager {\n    // Store data with size management\n    storeData(key, data) {\n        try {\n            const serialized = JSON.stringify(data);\n            // If data is getting too large (>5MB), keep only recent items\n            if (object_sizeof__WEBPACK_IMPORTED_MODULE_0___default()(serialized) / (1024 * 1024) > 5) {\n                const recentData = data.slice(-1000); // Keep last 1000 items\n                localStorage.setItem(key, JSON.stringify(recentData));\n                console.warn(\"Storage size exceeded for \".concat(key, \", keeping recent \").concat(recentData.length, \" items\"));\n            } else {\n                localStorage.setItem(key, serialized);\n            }\n        } catch (error) {\n            console.error(\"Failed to store \".concat(key, \":\"), error);\n            this.handleStorageError(key, data);\n        }\n    }\n    getData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : [];\n        } catch (error) {\n            console.error(\"Failed to retrieve \".concat(key, \":\"), error);\n            return [];\n        }\n    }\n    appendData(key, newItem) {\n        const existing = this.getData(key);\n        existing.push(newItem);\n        this.storeData(key, existing);\n    }\n    updateUserBehavior(behavior) {\n        localStorage.setItem(this.STORAGE_KEYS.USER_BEHAVIOR, JSON.stringify(behavior));\n    }\n    getUserBehavior() {\n        const data = localStorage.getItem(this.STORAGE_KEYS.USER_BEHAVIOR);\n        return data ? JSON.parse(data) : null;\n    }\n    // Queue data for syncing\n    queueForSync(sessionId) {\n        const payload = {\n            sessionId,\n            events: this.getData(this.STORAGE_KEYS.EVENTS),\n            networkMetrics: this.getData(this.STORAGE_KEYS.NETWORK),\n            performanceMetrics: this.getData(this.STORAGE_KEYS.PERFORMANCE),\n            userBehavior: this.getUserBehavior() || {},\n            timestamp: Date.now()\n        };\n        const syncQueue = this.getData(this.STORAGE_KEYS.SYNC_QUEUE);\n        syncQueue.push(payload);\n        this.storeData(this.STORAGE_KEYS.SYNC_QUEUE, syncQueue);\n    }\n    getSyncQueue() {\n        return this.getData(this.STORAGE_KEYS.SYNC_QUEUE);\n    }\n    clearSyncedData(timestamp) {\n        const queue = this.getSyncQueue().filter((item)=>item.timestamp > timestamp);\n        this.storeData(this.STORAGE_KEYS.SYNC_QUEUE, queue);\n    }\n    clearLocalData() {\n        Object.values(this.STORAGE_KEYS).forEach((key)=>{\n            if (key !== this.STORAGE_KEYS.SYNC_QUEUE) {\n                localStorage.removeItem(key);\n            }\n        });\n    }\n    handleStorageError(key, data) {\n        // Try to clear old data and retry\n        if (Array.isArray(data) && data.length > 100) {\n            const reducedData = data.slice(-50);\n            try {\n                localStorage.setItem(key, JSON.stringify(reducedData));\n                console.warn(\"Reduced \".concat(key, \" data size and retried\"));\n            } catch (e) {\n                console.error(\"Critical storage error for \".concat(key));\n            }\n        }\n    }\n    getStorageInfo() {\n        const info = Object.entries(this.STORAGE_KEYS).map((param)=>{\n            let [name, key] = param;\n            const data = localStorage.getItem(key);\n            const size = data ? new Blob([\n                data\n            ]).size : 0;\n            return {\n                name,\n                key,\n                size: \"\".concat((size / 1024).toFixed(2), \" KB\"),\n                items: data ? JSON.parse(data).length || 1 : 0\n            };\n        });\n        return info;\n    }\n    constructor(){\n        this.STORAGE_KEYS = {\n            EVENTS: 'drawing_analytics_events',\n            NETWORK: 'drawing_analytics_network',\n            PERFORMANCE: 'drawing_analytics_performance',\n            USER_BEHAVIOR: 'drawing_analytics_behavior',\n            SYNC_QUEUE: 'drawing_analytics_sync_queue',\n            LAST_SYNC: 'drawing_analytics_last_sync'\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnalyticsLocalStorageManager);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/util/AnalyticsLocalStorageManager.ts\n"));

/***/ })

});